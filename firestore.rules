rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && (
        // Self update
        request.auth.uid == userId ||
        // Admin update
        isAdmin() ||
        // Allow referrer to be updated
        (resource.data.referralCode in request.resource.data.keys()) ||
        // Allow points to be updated
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['referralPoints', 'purchasedCourses', 'referralRewarded']))
      );
      // Allow querying by referral code
      allow list: if request.auth != null;
    }

        // Courses collection
    match /courses/{courseId} {
      allow read: if true; // Publicly readable
      allow write: if isAdmin();
    }

    match /certificates/{certId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /course_ratings/{ratingId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    match /contact_messages/{messageId} {
      allow read, write: if isAdmin();
      allow create: if true;
    }

    match /orders/{orderId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }

    // Add this section for app settings
    match /appSettings/{document=**} {
      // Anyone can read app settings
      allow read: if true;
      // Only admins can modify settings
      allow write: if isAdmin();
    }

    // Discount codes rules
    match /discountCodes/{codeId} {
      allow read: if true;
      allow write: if isAdmin();
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentUses']);
    }

        // Add this section for payments
    match /payments/{paymentId} {
      // Allow users to read their own payments and admins to read all
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow users to create payments for themselves
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      
      // Only admins can update or delete payments
      allow update, delete: if isAdmin();
    }

    match /invoiceRequests/{requestId} {
  allow read: if request.auth != null && 
    (resource.data.userId == request.auth.uid || isAdmin());
  allow create: if request.auth != null && 
    request.resource.data.userId == request.auth.uid;
  allow update: if isAdmin() || 
    (request.auth != null && 
     resource.data.userId == request.auth.uid && 
     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
  allow delete: if isAdmin();
}
  }
}